export COMPOSE_PROJECT_NAME=sample
export DNS_GEN_TLD=my.super.awesome.domain.de

export UID=$(id -u)
export GID=$(id -g)
export PROJECT_DIRECTORY=$PWD
export SQL_DUMP_DIR=${PROJECT_DIRECTORY}/var/sql
export SSL_CERT=/etc/ssl/certs/www.magento.${COMPOSE_PROJECT_NAME}.${DNS_GEN_TLD}.pem

export IP_ADDRESS=$(env ip addr list eth0 | env grep "inet" | env cut -d' ' -f6 | env cut -d/ -f1)

find_sql_dump() {
    mkdir -p ${SQL_DUMP_DIR}
    echo ${SQL_DUMP_DIR}/$(env ls -Art ${SQL_DUMP_DIR} | tail -n 1)
}

logs() {
    export SQL_DUMP=$(find_sql_dump)
    docker-compose logs -f
}

up() {
    export SQL_DUMP=$(find_sql_dump)
    docker-compose up -d
    docker-compose logs -f
}

down() {
    export SQL_DUMP=$(find_sql_dump)
    docker-compose down
}

shell() {
    export SQL_DUMP=$(find_sql_dump)
    docker-compose run shell
}

mkpem() {
    env mkpem www.magento.${COMPOSE_PROJECT_NAME}.${DNS_GEN_TLD}
}

enter() {
    export SQL_DUMP=$(find_sql_dump)
    docker-compose exec $1 /bin/sh
}

urls() {
    services=()
    while read -r line; do
        services+=("$line")
    done <<< "$(docker-compose config --services)"

    for service in "${services[@]}"
    do
        cmd="docker-compose config | python2 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' | jq -c '.services.${service}.labels'"
	url=$(eval $cmd | jq -c '."dns.service"' | tr -d '"')
        
        if [ ! "$url" = "null" ]
        then
	    url+="."$(eval $cmd | jq -c '."dns.domain"' | tr -d '"')
	    url+="."$(eval $cmd | jq -c '."dns.tld"' | tr -d '"')

            echo "$url"
        fi
    done

}


db_shell() {
    mycli -u$COMPOSE_PROJECT_NAME -h mysql.$COMPOSE_PROJECT_NAME.$DNS_GEN_TLD -p $COMPOSE_PROJECT_NAME $COMPOSE_PROJECT_NAME
}
